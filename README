HOW TO GET A BEAGLEBONE

The BeagleBone is an ARM-based development/test board from the
BeagleBoard project.  It features a modern ARMv7 Cortex-A8 processor
and a wealth of on-chip peripheral support.  Details can be found at:
   http://beagleboard.org/bone

The BeagleBone is designed partly as a hobby/experimenters board and
partly as a complete example system for people who want to build their
own hardware around one of the TI AM335x chips.

The BeagleBone is an easy way to learn about ARM development: it is
inexpensive (about $85) and does not require any special skills or
hardware to use.  You connect it to your desktop with a Mini USB cable
(which both powers the board and provides serial console access) and
boot it from a MicroSDHC card with the system image.

Once you have the BeagleBone working, you can expand it by connecting
it to Ethernet, adding USB peripherals (such as external disk drives
or wireless network interfaces) or attaching new hardware to the
connectors on the board.

============================================================

HOW TO BUILD THE DISK IMAGE

The beaglebsd.sh script can build a complete bootable FreeBSD image
ready to be copied to a MicroSDHC card.  The script runs on
FreeBSD-CURRENT (March 2012 or later).

Using the script to build an image consists of three steps:

1. EDIT beaglebsd-config.sh

You need to set the image size to match the micro SDHC card you'll be using
and verify that certain directories have enough free space.  There are
lots of comments in this file to help you.

2. RUN beaglebsd.sh as root

   $ sudo /bin/sh beaglebsd.sh

The script will first check that you have all the needed sources.  If
you don't, the script will tell you exactly how to obtain the missing
pieces.  Follow the instructions and re-run the script until you have
everything.

As soon as it finds all the required pieces, the script will then
compile everything and build the disk image.  This part of the process
can take several hours.

3. COPY the image to a MicroSDHC card.

The script will print the command you need to do this.

To verify the image, try mounting the card on your FreeBSD system.  It
should show up with two slices: The first slice is MSDOS formatted and
contains the necessary boot machinery, including the U-Boot loader.
The second slice is a standard FreeBSD UFS partition with the actual
system installed.

============================================================

HOW TO BOOT A BEAGLEBONE

1. CONNECT the board to your FreeBSD system using a Mini-USB cable.
The Mini-USB connector is on the bottom of the BeagleBone.

2. ACCESS the serial console on the board from your desktop:
   $ tip XXXXXX
(You'll need the XXX driver loaded into your kernel.)

3. INSERT the MicroSDHC card into your BeagleBone

4. REBOOT the BeagleBone by depressing the small switch next to the
Ethernet port.

============================================================

ANATOMY of a BEAGLEBONE BOOT IMAGE

The AM3358 SoC contains ROM code that can identify a bootable FAT
partition and load a first-stage boot program from a file.  So the
MicroSDHC card is partitioned into two slices: The first is a
relatively small FAT partition that contains the initial boot
software.  The rest of the space is a FreeBSD UFS partition that is
mounted as the root filesystem.

The ROM code loads a file called "MLO" from the FAT filesystem into
on-chip RAM.  The MLO program is responsible for initializing the
external RAM and loading the next-stage boot.

In this case, MLO is a stripped-down version of the U-Boot boot loader
that fits within the on-chip RAM.  From there, it can initialize the
external RAM and then load the full U-Boot loader as the next stage.

The U-Boot loader is a GPL project to produce a highly modular
boot loader system that can be used on a wide variety of
systems.  The loader is configured with built-in script commands
that can be partially overridden by additional commands in
the uEnv.txt file.

The uEnv.txt file supplied here directs U-Boot to load
XXXXX YYYYY.

