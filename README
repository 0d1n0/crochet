freebsd-beaglebone
==================

Script to build a bootable FreeBSD image for BeagleBone.

This started from Damjan Marion's instructions at
  http://people.freebsd.org/~dmarion/beaglebone/creating_bootable_sd_card/

but has several improvements:

 * For speed, it builds an image file on disk rather than
   directly on the MicroSDHC card.

 * Uses the standard FreeBSD boot loader to load the dynamic
   kernel from UFS.  Among other benefits, this supports all
   standard FreeBSD load-time configuration options.

Note:  This relies on the armv6 FreeBSD tree that is still
very much under active development.  Expect bumps.

============================================================

What is a BeagleBone?
--------------------

The BeagleBone is an ARM-based development/test board from the
BeagleBoard project.  It features a modern ARMv7 processor and a
wealth of on-chip peripheral support.  Details can be found at:

   http://beagleboard.org/bone

The BeagleBone is an easy way to learn about ARM development: it is
inexpensive (about $85) and does not require any special skills or
hardware to use.  You connect it to your desktop with a Mini USB cable
(which both powers the board and provides serial console access) and
boot it from a MicroSDHC card with the system image.

Once you have the BeagleBone working, you can expand it by connecting
it to Ethernet, adding USB peripherals (such as external disk drives
or wireless network interfaces) or attaching new hardware to the
connectors on the board.

============================================================

How to Build a Disk Image
-------------------------

The beaglebsd.sh script can build a complete bootable FreeBSD image
ready to be copied to a MicroSDHC card.  The script runs on
FreeBSD-CURRENT (March 2012 or later).

Using the script to build an image consists of three steps:

1. EDIT beaglebsd-config.sh

   You need to set the image size to match the MicroSDHC card you'll
   be using and verify that certain directories have enough free
   space.  There are lots of comments in this file to help you.

2. RUN beaglebsd.sh as root

   $ sudo /bin/sh beaglebsd.sh

   The script will first check that you have all the needed sources.
   If you don't, the script will tell you exactly how to obtain the
   missing pieces.  Follow the instructions and re-run the script
   until you have everything.

   As soon as it finds all the required pieces, the script will then
   compile everything and build the disk image.  This part of the
   process can take several hours.

3. COPY the image to a MicroSDHC card.

   The script will suggest a command to do this.

To verify the image, try mounting the card on your FreeBSD system.  It
should show up with two slices: The first slice is FAT formatted and
contains the necessary boot machinery, including the U-Boot loader.
The second slice is a standard FreeBSD UFS partition with the actual
system installed.

============================================================

How to boot the BeagleBone
--------------------------

1. CONNECT the board to your FreeBSD system using a Mini-USB cable.
   The Mini-USB connector is on the bottom of the BeagleBone.

2. ACCESS the serial console on the board from your desktop:
   $ sudo cu -l /dev/ttyU1 -s 115200

   (You may need to load the uftdi driver into your kernel.)

3. INSERT the MicroSDHC card into your BeagleBone

4. REBOOT the BeagleBone by depressing the small
   switch next to the Ethernet port.

============================================================

IF SOMETHING GOES WRONG
-----------------------

If the image fails to boot, it's probably because FreeBSD failed to
build correctly (the armv6 tree is under very active development).
The script continues to run and builds the image, but it will
have things missing.

Look at the build and install logs under the 'work' directory, and ask
on the arm@freebsd.org or freebsd-current@freebsd.org mailing list for
help.

============================================================

Anatomy of a BeagleBone Boot Image
----------------------------------

The FreeBSD bootable image for BeagleBone has both FAT
and UFS partitions containing the following files:

  FAT Partition
     MLO  - First stage boot, from U-Boot
     u-boot.img - Second stage: U-Boot
     uEnv.txt - configuration for U-Boot
     ubldr - Third stage: FreeBSD bootloader

  UFS Partition
     /boot/kernel - dynamic kernel
     ... rest of FreeBSD ...

The boot process works like this:

 1) AM3358 SoC ROM code inspects the MicroSDHC card, finds the MBR
    partition table and loads "MLO" from the first FAT partition.

    MLO is loaded before external RAM is initialized, so it has to be
    under 110k to fit within the on-chip RAM.  MLO here is a
    stripped-down version of U-Boot.

 2) MLO loads u-boot.img from the first FAT partition.

    U-Boot is a highly modular boot loader system that can be used on
    a wide variety of systems.  The loader is configured with built-in
    script commands that can be partially overridden by additional
    commands in the uEnv.txt file.

 3) U-Boot loads uEnv.txt and follows those commands to load ubldr at
    address 0x80100000.

    ubldr is a variant of FreeBSD's standard loader(8) program that is
    designed to be chain-loaded from U-Boot.  It calls into U-Boot for
    low-level device access, which allows ubldr to load FreeBSD on any
    system that supports U-Boot.

 4) ubldr locates the UFS partition, loads /boot/kernel/kernel from
    UFS to address 0x80200000 and executes it.

============================================================

Notes and Errata
----------------------------------------

May 6, 2012: The ubldr binary used here was compiled from my local
tree and relies on some local patches I've been working on.  These
patches probably break ubldr on other platforms so cannot (yet) be
committed to the FreeBSD tree.  I'm working to generalize them and get
them committed.  Contact me if you'd like to get copies of the
patches.

May 27, 2012: Caveat: FreeBSD's armv6 tree is still a little wonky.
If you have trouble building, try checking out revision 234857.

May 27, 2012: I believe I've fixed the U-boot building;
the Arago sources had bloated the MLO some so it could no longer
link.  Thanks to jhofstee for suggesting a specific fix.
(If you still see errors about "region .sram is full",
try checking out commit d0e52e5 of the Arago sources.)

May 27, 2012:  Full in-place source upgrades work natively
on the BeagleBone now.  You probably want at least a 6G image,
uncomment INSTALL_USR_SRC in the configuration file to populate
/usr/src on the card, and use the following command:
  $ make TARGET_CPUTYPE=armv6 buildworld
  $ make TARGET_CPUTYPE=armv6 KERNCONF=BEAGLEBONE buildkernel
  $ make TARGET_CPUTYPE=armv6 KERNCONF=BEAGLEBONE installkernel
  $ make TARGET_CPUTYPE=armv6 installworld
Buildworld took about 30 hours last time I tried.
